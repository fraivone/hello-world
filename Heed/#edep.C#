#include <iostream>

#include <TCanvas.h>
#include <TROOT.h>
#include <TApplication.h>
#include <TH1F.h>


#include "MediumMagboltz.hh"
#include "SolidBox.hh"
#include "AvalancheMicroscopic.hh"
#include "GeometrySimple.hh"
#include "ComponentConstant.hh"
#include "Sensor.hh"
#include "TrackHeed.hh"
#include "Plotting.hh"
#include "Random.hh"

using namespace Garfield;

int main(int argc, char * argv[]) {

  randomEngine.Seed(123456);
  TApplication app("app", &argc, argv);
  plottingEngine.SetDefaultStyle();

  ComponentAnsys123* fm = new ComponentAnsys123();
  const std::string efile = "ELIST.lis";
  const std::string nfile = "NLIST.lis";
  const std::string mfile = "MPLIST.lis";
  const std::string sfile = "PRNSOL.lis";
  fm->Initialise(efile, nfile, mfile, sfile, "mm");
  fm->EnableMirrorPeriodicityX();
  fm->EnableMirrorPeriodicityY();
  fm->PrintRange();

  // Histograms
  TH1::StatOverflows(kTRUE); 
  TH1F* hElectrons = new TH1F("hElectrons", "Number of electrons",
                              200, 0, 200);
  TH1F* hEdep = new TH1F("hEdep", "Energy Loss",
                         100, 0., 10.);
  TH1D* hEnergy = new TH1D("hEnergy","Electron energy", 100,0.,1.);

  // Make a medium
  MediumMagboltz* gas = new MediumMagboltz();
  gas->SetComposition("ar", 70., "co2", 30.);
  gas->SetTemperature(293.15);
  gas->SetPressure(760.);
  gas->EnableDebugging();
  gas->Initialise();
  gas->DisableDebugging();
  const double rPenning = 0.57;
  const double lambdaPenning = 0.;
  gas->EnablePenningTransfer(rPenning, lambdaPenning, "ar");
  // Load the ion mobilities.
  gas->LoadIonMobility("/home/francesco/Garfield/Data/IonMobility_Ar+_Ar.txt");

  // // Detector geometry
  // // Gap [cm]
  // const double width = 0.1;
  // SolidBox* box = new SolidBox(0., 0., 0.,1.,1., width / 2.);
  // GeometrySimple* geo = new GeometrySimple();
  // geo->AddSolid(box, gas);

  // // Make a component
  // ComponentConstant* comp = new ComponentConstant();
  // comp->SetGeometry(geo);
  // comp->SetElectricField(0.,0.,100.);

  // // Make a sensor
  // Sensor* sensor = new Sensor();
  // sensor->AddComponent(comp);
  
  // Associate the gas with the corresponding field map material. 
  const int nMaterials = fm->GetNumberOfMaterials();
  for (int i = 0; i < nMaterials; ++i) {
    const double eps = fm->GetPermittivity(i);
    if (fabs(eps - 1.) < 1.e-3) fm->SetMedium(i, gas);
  }
  fm->PrintMaterials();
  
  // Create the sensor.
  Sensor* sensor = new Sensor();
  sensor->AddComponent(fm);
  sensor->SetArea(-5 * pitch, -5 * pitch, -0.1,
		  5 * pitch,  5 * pitch,  0.1);



  
  // Track class
  TrackHeed* track = new TrackHeed();
  track->SetSensor(sensor);
  track->SetParticle("mu");
  track->SetMomentum(120.e9);
  AvalancheMicroscopic* aval = new AvalancheMicroscopic();
  aval->SetSensor(sensor);
  double e0 = 1.5;
  const int nEvents = 1;
  track->EnableDebugging();
  track->DisableDeltaElectronTransport();
  for (int i = 0; i < nEvents; ++i) {
    if (i == 1) track->DisableDebugging();
    if (i % 100 == 0) std::cout << i << "/" << nEvents << "\n";
    // Initial position and direction
    double x0 = 0., y0 = 0., z0 = -width/2, t0 = 0.;
    double dx0 = 0., dy0 = 0., dz0 = 1.; 
    track->NewTrack(x0, y0, z0, t0, dx0, dy0, dz0);
    // Cluster coordinates
    double xc = 0., yc = 0., zc = 0., tc = 0.;
    // Number of electrons produced in a collision
    int nc = 0;
    // Energy loss in a collision
    double ec = 0.;
    // Dummy variable (not used at present)
    double extra = 0.;
    // Total energy loss along the track
    double esum = 0.;
    // Total number of electrons produced along the track
    int nsum = 0;
    // Loop over the clusters.
    while (track->GetCluster(xc, yc, zc, tc, nc, ec, extra)) {
      esum += ec;
      nsum += nc;
      std::cout<<"Nel cluster ("<<xc<<","<<yc<<","<<zc<<") ho trovato "<<nc<<" elettroni.\n";
      for(int y=nc; y--;)
	{
	  if(track->GetElectron(y,x0,y0,z0,t0,e0,dx0,dy0,dz0))
	    {
	      std::cout<<"Elettrone "<<nc-y<<"\t Posizione ("<<x0<<","<<y0<<","<<z0<<")\t Energia "<< e0<<"\t Direzione ("<<dx0<<","<<dy0<<","<<dz0<<")\n";

	    }

	
	  
	}
        std::cout<<"___________________________________________________________________________________________________________\n\n\n";












      
    }
    hElectrons->Fill(nsum);
    hEdep->Fill(esum * 1.e-3);
  }










  PLOT
 
  TCanvas* c1 = new TCanvas();
  hElectrons->GetXaxis()->SetTitle("number of electrons"); 
  hElectrons->Draw();
  c1->SaveAs("ne.pdf");

  TCanvas* c2 = new TCanvas();
  hEdep->GetXaxis()->SetTitle("particle energy loss [keV]");
  hEdep->Draw();
  c2->SaveAs("depositedenergy.pdf");

  TCanvas* c3 = new TCanvas();
  c3->cd();
  hEnergy->GetXaxis()->SetTitle("Primary electrons energy");
  hEnergy->Draw();
  app.Run(kTRUE); 

}
